# bot.py

import asyncio
import os
import io
import contextlib
import importlib
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
BOT_TOKEN = "8364995071:AAGcP6peDccXjyKcJH9bcM-IiXVqc67RFeE"
GRAPH_FOLDER = "graphs"
os.makedirs(GRAPH_FOLDER, exist_ok=True)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
import MaximiN
import min2

# ===== –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π =====
class GraphStates(StatesGroup):
    choose_action = State()
    choose_mode = State()
    choose_file = State()

# ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =====
bot = Bot(BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ===== /start =====
@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1Ô∏è‚É£ –ü–æ—Å—á–∏—Ç–∞—Ç—å –≥–æ—Ç–æ–≤—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é", callback_data="action_count")],
            [InlineKeyboardButton(text="2Ô∏è‚É£ –ù–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é", callback_data="action_optimize")]
        ]
    )
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–æ–≤.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.set_state(GraphStates.choose_action)

# ===== –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è =====
@dp.callback_query(GraphStates.choose_action)
async def choose_action_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "action_count":
        await state.update_data(action="count")
        await send_file_list(callback.message, state)
        await state.set_state(GraphStates.choose_file)
    else:
        await state.update_data(action="optimize")
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="1Ô∏è‚É£ Maximin / Minimax", callback_data="mode_maximin")],
                [InlineKeyboardButton(text="2Ô∏è‚É£ Min / Max", callback_data="mode_min")]
            ]
        )
        await callback.message.answer("‚öôÔ∏è –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:", reply_markup=keyboard)
        await state.set_state(GraphStates.choose_mode)

# ===== –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏) =====
@dp.callback_query(GraphStates.choose_mode)
async def choose_mode_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "mode_maximin":
        await state.update_data(mode="maximin")
    else:
        await state.update_data(mode="min")

    await send_file_list(callback.message, state)
    await state.set_state(GraphStates.choose_file)

# ===== –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ =====
async def send_file_list(message: types.Message, state: FSMContext):
    files = [f for f in os.listdir(GRAPH_FOLDER) if f.endswith(".graph")]
    inline_buttons = [[InlineKeyboardButton(text=f, callback_data=f"file_{f}")] for f in files]
    inline_buttons.append([InlineKeyboardButton(text="üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª", callback_data="upload_new")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons)
    await message.answer("üìÇ –í—ã–±–µ—Ä–∏ .graph —Ñ–∞–π–ª:", reply_markup=keyboard)

@dp.callback_query(GraphStates.choose_file)
async def choose_file_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "upload_new":
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ .graph —Ñ–∞–π–ª üìé")
        return
    else:
        filename = callback.data.replace("file_", "")
        file_path = os.path.join(GRAPH_FOLDER, filename)
        await process_graph(callback.message, state, file_path)

@dp.message(GraphStates.choose_file, F.document)
async def handle_file(message: types.Message, state: FSMContext):
    file = message.document
    file_path = os.path.join(GRAPH_FOLDER, file.file_name)
    await bot.download(file, destination=file_path)
    await process_graph(message, state, file_path)

# ===== –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ =====
async def process_graph(message: types.Message, state: FSMContext, file_path: str):
    data = await state.get_data()
    action = data.get("action")
    mode = data.get("mode")  # None, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–æ–¥—Å—á—ë—Ç –≥–æ—Ç–æ–≤–æ–π

    await message.answer("‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    buffer = io.StringIO()
    with contextlib.redirect_stdout(buffer):
        try:
            if action == "count":
                importlib.reload(min2)
                min2.main(file_path, choice="1")
            else:
                if mode == "maximin":
                    importlib.reload(MaximiN)
                    MaximiN.main(file_path, choice="2")
                else:
                    importlib.reload(min2)
                    min2.main(file_path, choice="2")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
            return

    output_text = buffer.getvalue()
    if len(output_text) > 4000:
        out_file = "output.txt"
        with open(out_file, "w", encoding="utf-8") as f:
            f.write(output_text)
        await message.answer_document(FSInputFile(out_file), caption="üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞")
    else:
        await message.answer(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n{output_text[:4000]}")

    # ===== –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ =====
    if action == "count":
        images = ["graph_from_file.png"]
    elif mode == "maximin":
        images = ["graph_maximin.png", "graph_minimax.png"]
    else:
        images = ["graph_min.png", "graph_max.png"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for img in images:
        if os.path.exists(img):
            await message.answer_photo(FSInputFile(img))

    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!")
    await state.clear()
    await cmd_start(message, state)

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π =====
@dp.message()
async def fallback(message: types.Message):
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.")

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    asyncio.run(dp.start_polling(bot))
